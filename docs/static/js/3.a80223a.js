(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{601:function(e,l,n){},609:function(e,l,n){"use strict";var t=n(601);n.n(t).a},633:function(e,l,n){"use strict";n.r(l);var t=n(602),o={name:"dragCol",data:function(){return{tableColumn:[{field:"name",title:"Name",fixed:"left",minWidth:200},{field:"sex",title:"Sex",minWidth:100},{field:"age",title:"Age",minWidth:150},{field:"describe",title:"describe",minWidth:200,showOverflow:!0}],tableData:[],demo:['<template>\n    <div class="sortable-column-demo">\n        <h3>拖拽列</h3>\n        <p>ux-grid使用 sortablejs 实现列移动，由于直接操作了 Dom 节点，需要与 Vue 的数据同步，必须设置 column-key （注：该示例仅供参考，具体逻辑请自行实现）</p>\n        <p>你如果使用拖拽列，那么就是使用第三方的东西，<a href="https://github.com/SortableJS/Sortable" target="_blank">请先安装sortablejs</a></p>\n        <ux-grid\n                border\n                column-key\n                height="500"\n                ref="plxTable"\n                :data="tableData">\n            <ux-table-column\n                    v-for="item in tableColumn"\n                    :key="item.id"\n                    :resizable="item.resizable"\n                    :field="item.field"\n                    :title="item.title"\n                    :sortable="item.sortable"\n                    :width="item.minWidth"\n                    :fixed="item.fixed"/>\n            <ux-table-column title="额外信息" minWidth="60" field="describe"></ux-table-column>\n        </ux-grid>\n    </div>\n</template>',"// Default SortableJS\n    //   import Sortable from 'sortablejs';\n    // Core SortableJS (without default plugins)\n    //   import Sortable from 'sortablejs/modular/sortable.core.esm.js';\n    // Complete SortableJS (with all plugins)\n    //   import Sortable from 'sortablejs/modular/sortable.complete.esm.js';\n\n    import Sortable from 'sortablejs/modular/sortable.core.esm.js';\n    export default {\n        name: \"dragCol\",\n        data () {\n            return {\n                tableColumn: [\n                    { field: 'name', title: 'Name', fixed: 'left', minWidth: 200 },\n                    { field: 'sex', title: 'Sex', minWidth: 100 },\n                    { field: 'age', title: 'Age', minWidth: 150 },\n                    { field: 'describe', title: 'describe', minWidth: 200, showOverflow: true }\n                ],\n                tableData: []\n            }\n        },\n        mounted () {\n            this.tableData = Array.from({ length: 50 }, (_, idx) => ({\n                id: idx + 1,\n                name: 'pl' + idx,\n                sex: idx,\n                age: 18,\n                describe: '欢迎使用plx' + idx\n            }))\n            this.columnDrop()\n        },\n        beforeDestroy () {\n            if (this.sortable) {\n                this.sortable.destroy()\n            }\n        },\n        methods: {\n            columnDrop () {\n                this.$nextTick(() => {\n                    let plxTable = this.$refs.plxTable\n                    // 关于sortable的配置https://www.cnblogs.com/xiangsj/p/6628003.html\n                    this.sortable = Sortable.create(plxTable.$el.querySelector('.body--wrapper .plx-table--header .plx-header--row'), {\n                        // 列表项中的拖动控制柄选择器 拖拽区域，默认为 .plx-header--row 的 子元素，\n                        // 下面（这个意思呢）是排除掉plx-header--column拖拽列中的固定列部分\n                        handle: '.plx-header--column:not(.col--fixed)',\n                        ghostClass: 'dragColbg',\n                        chosenClass: 'dragColbg',\n                        // 拖拽结束\n                        onEnd: ({ item, newIndex, oldIndex }) => {\n                            // fullColumn: 全量表头列   tableColumn: 当前渲染中的表头列\n                            let { fullColumn, tableColumn } = plxTable.getTableColumn()\n                            let targetThElem = item\n                            let wrapperElem = targetThElem.parentNode\n                            let newColumn = fullColumn[newIndex]\n                            if (newColumn.fixed) {\n                                // 错误的移动\n                                if (newIndex > oldIndex) {\n                                    wrapperElem.insertBefore(targetThElem, wrapperElem.children[oldIndex])\n                                } else {\n                                    wrapperElem.insertBefore(wrapperElem.children[oldIndex], targetThElem)\n                                }\n                                return this.$message({ message: '固定列不允许拖动！', status: 'error' })\n\n                            }\n                            // 转换真实索引\n                            let oldColumnIndex = plxTable.getColumnIndex(tableColumn[oldIndex])\n                            let newColumnIndex = plxTable.getColumnIndex(tableColumn[newIndex])\n                            // 移动到目标列\n                            let currRow = fullColumn.splice(oldColumnIndex, 1)[0]\n                            fullColumn.splice(newColumnIndex, 0, currRow)\n                            // 加载列\n                            plxTable.loadColumn(fullColumn)\n                        }\n                    })\n                })\n            }\n        }\n    }\n\n    <style lang=\"scss\">\n    .dragColbg {\n        background-color: #409eff;\n    }\n    .sortable-column-demo .plx-header--row .plx-header--column.col--fixed {\n        cursor: no-drop;\n    }\n</style>"]}},mounted:function(){this.tableData=Array.from({length:50},(function(e,l){return{id:l+1,name:"pl"+l,sex:l,age:18,describe:"欢迎使用plx"+l}})),this.columnDrop()},beforeDestroy:function(){this.sortable&&this.sortable.destroy()},methods:{columnDrop:function(){var e=this;this.$nextTick((function(){var l=e.$refs.plxTable;e.sortable=t.a.create(l.$el.querySelector(".body--wrapper .plx-table--header .plx-header--row"),{handle:".plx-header--column:not(.col--fixed)",ghostClass:"dragColbg",chosenClass:"dragColbg",onEnd:function(n){var t=n.item,o=n.newIndex,r=n.oldIndex,a=l.getTableColumn(),i=a.fullColumn,d=a.tableColumn,s=t,m=s.parentNode;if(i[o].fixed)return o>r?m.insertBefore(s,m.children[r]):m.insertBefore(m.children[r],s),e.$message({message:"固定列不允许拖动！",status:"error"});var u=l.getColumnIndex(d[r]),b=l.getColumnIndex(d[o]),c=i.splice(u,1)[0];i.splice(b,0,c),l.loadColumn(i)}})}))}}},r=(n(609),n(34)),a=Object(r.a)(o,(function(){var e=this,l=e.$createElement,n=e._self._c||l;return n("div",{staticClass:"sortable-column-demo"},[n("h3",[e._v("拖拽列")]),n("p",[e._v("ux-grid使用 sortablejs 实现列移动，由于直接操作了 Dom 节点，需要与 Vue 的数据同步，必须设置 column-key （注：该示例仅供参考，具体逻辑请自行实现）")]),e._m(0),n("ux-grid",{ref:"plxTable",attrs:{border:"","column-key":"",height:"500",data:e.tableData}},[e._l(e.tableColumn,(function(e){return n("ux-table-column",{key:e.id,attrs:{resizable:e.resizable,field:e.field,title:e.title,sortable:e.sortable,width:e.minWidth,fixed:e.fixed}})})),n("ux-table-column",{attrs:{title:"额外信息",minWidth:"60",field:"describe"}})],2),n("pre",[e._v("        "),n("code",[e._v(e._s(e.demo[0]))]),e._v("\n        "),n("code",[e._v(e._s(e.demo[1]))]),e._v("\n    ")])],1)}),[function(){var e=this.$createElement,l=this._self._c||e;return l("p",[this._v("你如果使用拖拽列，那么就是使用第三方的东西，"),l("a",{attrs:{href:"https://github.com/SortableJS/Sortable",target:"_blank"}},[this._v("请先安装sortablejs")])])}],!1,null,null,null);l.default=a.exports}}]);
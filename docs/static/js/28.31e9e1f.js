(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{630:function(e,n,t){"use strict";t.r(n);var a={name:"component-exhibition",components:{"firm-demo0":(Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e})({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("ux-grid",{ref:"plxTable",attrs:{border:"","show-overflow":"","keep-source":"",height:"500",data:e.tableData,highlightCurrentRow:!1,"edit-config":{trigger:"click",mode:"cell"}}},[t("ux-table-column",{attrs:{type:"checkbox",width:"60"}}),e._v(" "),t("ux-table-column",{attrs:{field:"name",title:"名字",width:"140","edit-render":{autofocus:".el-input__inner"}},scopedSlots:e._u([{key:"edit",fn:function(n){return[t("el-input",{model:{value:n.row.name,callback:function(t){e.$set(n.row,"name",t)},expression:"scope.row.name"}})]}},{key:"default",fn:function(n){return[t("span",{staticClass:"my-input-sc"},[e._v(e._s(n.row.name))])]}}])}),e._v(" "),t("ux-table-column",{attrs:{field:"age",title:"年龄","edit-render":""},scopedSlots:e._u([{key:"edit",fn:function(n){var a=n.row;return[t("el-input",{staticStyle:{width:"100%"},attrs:{type:"number",placeholder:"请输入内容"},on:{input:function(n){return e.updateFooterEvent(a.age)}},model:{value:a.age,callback:function(n){e.$set(a,"age",n)},expression:"row.age"}})]}},{key:"default",fn:function(n){return[t("span",{staticClass:"my-input-sc"},[e._v(e._s(n.row.age))])]}}])})],1)]],2)},staticRenderFns:[]},{data:function(){return{tableData:[]}},mounted:function(){this.tableData=Array.from({length:10},(function(e,n){return{id:n+1,date:"2016-05-03",name:"张三"+n,sex:"nan",age:18+n}}))}})}},i=t(34),r=Object(i.a)(a,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[e._m(0),t("p",[e._v("1.致力于很多小伙伴说，我们的客户就需要输入框直接展示出来的感觉。那么作者在这里给你一个满意的答卷！")]),t("p",[e._v("2.首先我们知道编辑型表格不能直接全部显示出来，因为这样初次渲染接口很多，会卡。所以如果我们想表格看上去全部都是输入框的感觉，得通过障眼法来做")]),t("p",[e._v("3.我们还是通过点击单元格触发编辑。但是我们可以通过自定义非编辑状态下个样子，这样就可以吧非编辑状态下的渲染标签改成输入框的那种假输入框感觉。")]),t("p",[e._v("4.autofocus非常重要的东西，你不绑定它，给你的感觉就是我点击障眼法的单元格了，但是输入框没有获取焦点。因为我们上面提到了。我们是障眼法的方式。点击了才渲染输入框。那么此时输入框并没有获取焦点。这个东西就是帮助我们去获取焦点。让别人感觉我是个真的输入框")]),t("p",[e._v("5.下面只给出了2列的示例，自己实际场景自己添加列都行！自己去定义其他不是输入框组件的样式！纯属示例！")]),t("div",[e._m(1),t("template",{slot:"source"},[t("firm-demo0")],1),t("template",{slot:"highlight"},[e._m(2)])],2)])}),[function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"quan-bu-xian-shi-qing-ren-zhen-du-wan-xia-mian-de-6-dian"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#quan-bu-xian-shi-qing-ren-zhen-du-wan-xia-mian-de-6-dian"}},[this._v("¶")]),this._v(" 全部显示，（请认真读完下面的6点）")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",[n("p",[this._v("6.你可以对比下，“名字”这一列加了autofocus的感觉。  在试试看 “年龄”这一列没有加上autofocus的感觉。你不难发现你点击年龄输入框需要点击2次才能获取焦点！")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[this._v('  <template>\n   <ux-grid border\n             show-overflow\n             ref="plxTable"\n             keep-source\n             height="500"\n             :data="tableData"\n             :highlightCurrentRow="false"\n             :edit-config="{trigger: \'click\', mode: \'cell\'}">\n             <ux-table-column type="checkbox" width="60"></ux-table-column>\n              \x3c!--autofocus，如果是自定义渲染可以指定聚焦的选择器，他的作用很明显就是你点击一下就帮你去获取焦点。\n              你无需点击第二次再去获取焦点。autofocus的值就是你编辑型输入框（edit）组件的类名--\x3e\n             <ux-table-column field="name" title="名字" width="140" :edit-render="{autofocus: \'.el-input__inner\'}">\n               <template v-slot:edit="scope">\n                \x3c!--autofocus绑定的类名就是这个组件的class类名。帮助获取输入框焦点--\x3e\n                 <el-input v-model="scope.row.name"></el-input>\n               </template>\n               \x3c!--写非编辑状态下的样式, 看最底部的style样式部分吧 有写my-input-sc样式哦--\x3e\n               <template v-slot="scope">\n                 <span class="my-input-sc">{{ scope.row.name }}</span>\n               </template>\n             </ux-table-column>\n             <ux-table-column field="age" title="年龄"  edit-render>\n               <template v-slot:edit="{ row }">\n                  <el-input\n                      v-model="row.age"\n                      type="number"\n                      placeholder="请输入内容"\n                      @input="updateFooterEvent(row.age)"\n                      style="width: 100%"></el-input>\n               </template>\n               \x3c!--写非编辑状态下的样式, 看最底部的style样式部分吧 有写my-input-sc样式哦--\x3e\n               <template v-slot="scope">\n                 <span class="my-input-sc">{{ scope.row.age }}</span>\n               </template>\n             </ux-table-column>\n           </ux-grid>\n  </template>\n\n  <script>\n    export default {\n       data () {\n           return {\n             tableData: []\n           }\n       },\n       mounted () {\n         // 延迟加载\n         this.tableData = Array.from({ length: 10 }, (_, idx) => ({\n             id: idx + 1,\n             date: \'2016-05-03\',\n             name: \'张三\' + idx,\n             sex: \'nan\',\n             age: 18 + idx\n          }))\n       }\n    }\n  <\/script>\n\n  <style>\n    .my-input-sc {\n       display: inline-block;\n       height: $default-height;\n       line-height: 30px;\n       -webkit-appearance: none;\n       background-color: #FFFFFF;\n       background-image: none;\n       border-radius: 4px;\n       border: 1px solid #DCDFE6;\n       box-sizing: border-box;\n       color: #606266;\n       font-size: inherit;\n       outline: none;\n       padding: 0 15px;\n       transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355, 1);\n       width: 100%;\n    }\n  </style>\n')])])}],!1,null,null,null);n.default=r.exports}}]);